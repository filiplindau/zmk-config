/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/behaviors.h>
//#include <keys_se.h>


&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <250>;
    quick-tap-ms = <220>;
};

/ {
    behaviors {
        ltr: repeat_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <220>;
            bindings = <&mo>, <&key_repeat>;
        };

          as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&shifted>, <&kp>;
        };
    };

    macros {
        m_qu: m_qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp Q &kp U>;
        };

        m_cbsp: m_cbsp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>,
                        <&macro_tap &kp BSPC>,
                        <&macro_release &kp LCTRL>;
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
            <&macro_press &kp LSHFT>,
            <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
            <&macro_release &kp LSHFT>;
        };

          as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
            <&macro_press>,
            <&macro_param_1to1>,
            <&macro_param_1to2>,
            <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
            <&macro_pause_for_release>,
            <&macro_release>,
            <&macro_param_1to1>,
            <&macro_param_1to2>,
            <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <35>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_bsp {
            timeout-ms = <30>;
            key-positions = <10 11>;
            bindings = <&kp BSPC>;
        };

        combo_cbsp {
            timeout-ms = <50>;
            key-positions = <23 31>;
            bindings = <&m_cbsp>;
        };

        combo_tab {
            timeout-ms = <30>;
            key-positions = <10 20>;
            bindings = <&kp TAB>;
        };

       combo_ent {
            timeout-ms = <30>;
            key-positions = <19 29>;
            bindings = <&kp ENTER>;
        };

       combo_cut {
            timeout-ms = <30>;
            key-positions = <20 21>;
            bindings = <&kp LC(X)>;
        };

       combo_copy {
            timeout-ms = <30>;
            key-positions = <21 22>;
            bindings = <&kp LC(C)>;
        };

       combo_paste {
            timeout-ms = <30>;
            key-positions = <21 23>;
            bindings = <&kp LC(V)>;
        };

       combo_undo {
            timeout-ms = <30>;
            key-positions = <20 22>;
            bindings = <&kp LC(Z)>;
        };

        combo_oe {
            timeout-ms = <20>;
            key-positions = <26 28>;
            bindings = <&kp SEMI>;
        };

        combo_ae {
            timeout-ms = <30>;
            key-positions = <16 18>;
            bindings = <&kp SQT>;
        };

        combo_aa {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LBKT>;
        };

        combo_qu {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&m_qu>;
        };

        combo_cpswd {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&caps_word>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

            default_layer {
        bindings = <
        &as W       &as F       &as M       &as P       &as V                          &as TAB     &as DOT     &as Q       &as J       &as Z
        &as R       &as S       &as N       &as T       &as G                          &as COMMA   &as A       &as E       &as I       &as H
        &as X       &as C       &as L       &as D       &as K                          &as SLASH   &as U       &as O       &as Y       &as B
                                            &lt 4 ENTER &lt 1 BSPC                     &lt 2 SPACE &ltr 3 0
        >;
        };

            nav_layer {
        bindings = <
        &kp LC(F4)  &kp LC(TAB) &kp LA(F4)  &kp LA(TAB) &none                          &kp TAB      &kp HOME     &kp UP       &kp END      &kp PG_UP
        &sk LGUI    &sk LALT    &sk LCTRL   &sk LSHFT   &none                          &kp DEL      &kp LEFT     &kp DOWN     &kp RIGHT    &kp PG_DN
        &none       &sk RALT    &none       &none       &none                          &kp BSPC     &kp ENTER    &kp ESC      &kp LC(RIGHT) &kp INS
                                            &lt 4 ENTER &lt 1 BSPC                     &lt 2 SPACE  &ltr 3 0
        >;
        };

            num_layer {
        bindings = <
        &kp KP_DIVIDE   &kp N7      &kp N8      &kp N9      &kp SLASH                  &kp TAB      &kp HOME     &kp UP       &kp END       &kp PG_UP
        &kp KP_MULTIPLY &kp N4      &kp N5      &kp N6      &kp MINUS                  &kp DEL      &sk RSHFT    &sk RCTRL    &sk LALT      &sk RGUI
        &kp LS(N0)      &kp N1      &kp N2      &kp N3      &kp N0                     &kp BSPC     &kp LC(LEFT) &kp ESC      &sk RALT      &kp INS
                                                &lt 4 ENTER &lt 1 BSPC                 &lt 2 SPACE  &ltr 3 0
        >;
        };

            sym_layer {
        bindings = <
        &kp LS(N1)      &kp RA(N7)   &kp RA(N0)    &kp LS(DOT) &kp LS(COMMA)            &kp RA(N2)   &kp LS(N3)   &kp RA(N4)   &kp LS(SLASH) &kp RA(MINUS)
        &kp RA(N8)      &kp LS(N8)   &kp LS(N9)   &kp RA(N9)  &kp LS(MINUS)            &kp LS(N5)   &kp NUBS     &kp RA(NUBS) &kp SLASH     &kp LS(NUBS)
        &kp LS(N6)      &kp RBRC     &kp RA(RBRC) &kp BSLH    &kp LS(N2)               &kp LS(N0)   &kp MINUS    &kp SLASH    &kp LS(SQT)   &kp LS(N7)
                                                  &lt 4 ENTER &lt 1 BSPC               &lt 2 SPACE  &ltr 3 0
        >;
        };

            fun_layer {
        bindings = <
        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4              &kp PSCRN       &kp F9      &kp F10     &kp F11     &kp F12                   
        &sk LGUI     &sk LALT     &sk LCTRL    &sk LSHFT     &none                     &kp CAPS        &kp F5      &kp F6      &kp F7      &kp F8                     
        &bt BT_CLR   &none        &none        &sk RALT      &none                     &kp SLCK        &kp F1      &kp F2      &kp F3      &kp F4                      
                                               &lt 4 ENTER   &lt 1 BSPC                &lt 2 SPACE     &ltr 3 0
        >;
        };

        //     fun_layer {
        // bindings = <
        // &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4              &kp PSCRN       &kp F9      &kp F10     &kp F11     &kp F12                   
        // &sk LGUI     &sk LALT     &sk LCTRL    &sk LSHFT     &none                     &kp CAPS        &kp F5      &kp F6      &kp F7      &kp F8                     
        // &kp BT_CLR   &none        &none        &sk RALT      &none                     &kp SLCK        &kp F1      &kp F2      &kp F3      &kp F4                      
        //                                        &lt 4 ENTER   &lt 1 BSPC                &lt 2 SPACE     &ltr 3 0
        // >;
        // };

        //     left_layer {
        // bindings = <
        // &kp N1  &kp N2    &kp N3    &kp N4    &kp N5     &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
        // &kp TAB    &kp LC(S)    &kp DQT      &kp PIPE2     &kp HASH         &kp MINUS &kp EQUAL  &kp LBKT &kp RBKT  &kp DEL
        // &kp ESC    &kp TILDE    &kp NON_US_BSLH &kp NON_US_HASH  &kp TILDE2     &kp MINUS &kp GRAVE &kp LBKT &kp RBKT  &kp DEL
        //                 &mo 1  &kp LGUI                     &kp RGUI &mo 2
        // >;
        // };

        // right_layer {
        // bindings = <
        // &kp EXCL  &kp AT &kp HASH  &kp DLLR  &kp PRCNT             &kp CARET  &kp AMPS &kp KP_MULTIPLY &kp LPAR &kp RPAR
        // &kp HASH  &kp QMARK  &kp FSLH  &kp COLON  &kp SEMI           &kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BSPC
        // &kp LSHFT  &kp KP_PLUS &kp LBKT &kp RBKT   &kp BSLH             &kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
        //               &mo 3 &kp LCTRL                &kp SPACE  &mo 2
        // >;
        // };

        // tri_layer {
        // bindings = <
        // &kp N1  &kp N2    &kp N3    &kp N4    &kp N5             &trans &trans   &trans   &trans  &trans
        // &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                          &trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans
        // &bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7                 &trans &kp PG_DN  &kp K_VOL_DN  &trans &trans
        //              &trans &trans                      &trans &trans
        // >;
        // };

    };
};
